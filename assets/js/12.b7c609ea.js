(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{335:function(a,t,s){"use strict";s.r(t);var n=s(3),r=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"java编程模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java编程模型"}},[a._v("#")]),a._v(" Java编程模型")]),a._v(" "),t("blockquote",[t("p",[a._v("本文主要介绍Java编程时用到的基础编程模型以及Java8最新的语法特性。\n")])]),a._v(" "),t("h2",{attrs:{id:"java程序的基本结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java程序的基本结构"}},[a._v("#")]),a._v(" Java程序的基本结构")]),a._v(" "),t("p",[a._v("一段 "),t("strong",[a._v("Java 程序(类)"),t("strong",[a._v("或者是一个")]),a._v("静态方法(函数)库")]),a._v("，或者定义了一个"),t("strong",[a._v("数据类型")]),a._v("。要创建静态方法库和定义数据类型，会用到下面七种语法，它们是Java语言的基础，也是大多数现代语言所共有的。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("原始数据类型")]),a._v(":它们在计算机程序中精确地定义整数、浮点数和布尔值等。它们的定义包括取值范围和能够对相应的值进行的操作，它们能够被组合为类似于数学公式定义的表达式。")]),a._v(" "),t("li",[t("strong",[a._v("语句")]),a._v(":语句通过创建变量并对其赋值、控制运行流程或者引发副作用来进行计算。我们会使用六种语句："),t("strong",[a._v("声明、赋值、条件、循环、调用和返回")]),a._v("。")]),a._v(" "),t("li",[t("strong",[a._v("数组")]),a._v(":数组是多个同种数据类型的值的集合。")]),a._v(" "),t("li",[t("strong",[a._v("静态方法")]),a._v(":静态方法可以封装并重用代码，使我们可以用独立的模块开发程序。")]),a._v(" "),t("li",[t("strong",[a._v("字符串")]),a._v(":字符串是一连串的字符，Java 内置了对它们的一些操作。")]),a._v(" "),t("li",[t("strong",[a._v("标准输入 / 输出")]),a._v(":标准输入输出是程序与外界联系的桥梁。")]),a._v(" "),t("li",[t("strong",[a._v("数据抽象")]),a._v(" : 数据抽象封装和重用代码，使我们可以定义非原始数据类型，进而支持面向对象编程。")])]),a._v(" "),t("p",[a._v("基本结构如图所示：\n"),t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/pixyshu/picgo@main/image/20221019095341.png",alt:""}})]),a._v(" "),t("h2",{attrs:{id:"原始数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原始数据类型"}},[a._v("#")]),a._v(" 原始数据类型")]),a._v(" "),t("h3",{attrs:{id:"java语言4种最原始的类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java语言4种最原始的类型"}},[a._v("#")]),a._v(" Java语言4种最原始的类型")]),a._v(" "),t("ul",[t("li",[a._v("整型，及其算术运算符(int);")]),a._v(" "),t("li",[a._v("双精度实数类型，及其算术运算符(double);")]),a._v(" "),t("li",[a._v("布尔型，它的值 {true,  false}及其逻辑操作(boolean);")]),a._v(" "),t("li",[a._v("字符型，它的值是你能够输入的英文字母数字字符和符号(char)")])]),a._v(" "),t("br"),a._v("\n### 其他5中原始类型\n- 64 位整数,及其算术运算符 (long); \n- 16 位整数,及其算术运算符 (short); \n- 16 位字符,及其算术运算符 (char);  \n- 8 位整数,及其算术运算符 ( byte);  \n- 32 位单精度实数,及其算术运算符 (float)\n"),t("br"),a._v("\n## 语句\nJava 程序是由语句组成的。语句能够通过创建和操作变量、对变量赋值并控制这些操作的执行流程来描述运算。\n- 声明语句:创建某种类型的变量并用标识符为其命名。\n- 赋值语句:将(由表达式产生的)某种类型的数值赋予一个变量。Java 还有一些隐式赋值的语法可以使某个变量的值相对于当前值发生变化,例如将一个整型值加 1。\n- 条件语句:能够简单地改变执行流程——根据指定的条件执行两个代码段之一。\n- 循环语句:更彻底地改变执行流程——只要条件为真就不断地反复执行代码段中的语句。\n- 调用和返回语句:和静态方法有关 , 是改变执行流程和代码组织的另一种方式\n"),t("br"),a._v("\n语句使用示例如下：\n![](https://cdn.jsdelivr.net/gh/pixyshu/picgo@main/image/20221019100113.png)\n"),t("br"),a._v("\n## 数组\n### 创建并初始化数组\n- 声明数组的名字和类型; \n- 创建数组; \n- 初始化数组元素。\n"),t("p",[a._v("数据的声明代码如下：")]),a._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://cdn.jsdelivr.net/gh/pixyshu/picgo@main/image/20221019100325.png"}}),a._v(" "),t("br"),a._v("\n### 简化写法\n为了精简代码,我们常常会利用 Java 对数组默认的初始化来将三个步骤合为一条语句。（⚠️注意，在Java中**数值类型默认初始值为0，布尔类型为false**）。\n如果我们需要声明并指定初始化值，还可以使用**花括号将一系列逗号分隔的值在编译时将数组初始化**。\n"),t("h3",{attrs:{id:"使用数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用数组"}},[a._v("#")]),a._v(" 使用数组")]),a._v(" "),t("p",[a._v("典型数组处理代码：\n"),t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/pixyshu/picgo@main/image/20221019100756.png",alt:""}}),a._v(" "),t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/pixyshu/picgo@main/image/20221019100813.png",alt:""}})]),a._v(" "),t("h3",{attrs:{id:"二维数组定义和初始化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二维数组定义和初始化"}},[a._v("#")]),a._v(" 二维数组定义和初始化")]),a._v(" "),t("p",[a._v("以下两种方式本质上都是一样，不过使用方式二，可以根据自己的需要进行初始化。")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// （1）声明并初始化 方式一")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("M")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("N")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// （2）方式二")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("M")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("N")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("M")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("N")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" j"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\t\ta"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br")])]),t("br"),a._v("\n## 静态方法\n在Java程序中，要么是数据类型的定义，要么就是一个静态方法库。静态方法也被称为函数，使用static修饰符与实例方法区分开来。\n"),t("h3",{attrs:{id:"静态方法解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态方法解析"}},[a._v("#")]),a._v(" 静态方法解析")]),a._v(" "),t("p",[a._v("方法封装了一系列语句所描述的运算，每个方法都有签名和函数体构成。")]),a._v(" "),t("p",[a._v("静态方法解析：")]),a._v(" "),t("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://cdn.jsdelivr.net/gh/pixyshu/picgo@main/image/20221019101610.png"}}),a._v(" "),t("h3",{attrs:{id:"方法的性质"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法的性质"}},[a._v("#")]),a._v(" 方法的性质")]),a._v(" "),t("ul",[t("li",[a._v("方法的参数按值传递：在方法中参数变量的使用方法和局部变量相同，唯一不同的是参数变量的初始值是由调用方提供的。")]),a._v(" "),t("li",[a._v("方法名可以被重载。")]),a._v(" "),t("li",[a._v("方法只能返回一个值，但可以包含多个返回语句。")]),a._v(" "),t("li",[a._v("方法可以产生副作用：方法的返回值可以是void，这表示该方法没有返回值。返回值为void的静态函数不需要明确的返回语句，方法的最后一条语句执行完毕后控制权将会返回给调用方。我们称 void类型的静态方法会产生副作用(接受输入、产生输出、修改数组或者改变系统状态)。")])]),a._v(" "),t("h3",{attrs:{id:"编写递归方法的注意点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编写递归方法的注意点"}},[a._v("#")]),a._v(" 编写递归方法的注意点")]),a._v(" "),t("ul",[t("li",[a._v("递归总有一个最简单的情况——方法的第一条语句总是一个包含return的条件语句。")]),a._v(" "),t("li",[a._v("递归调用总是去尝试解决一个规模更小的子问题，这样递归才能收敛到最简单的情况。")]),a._v(" "),t("li",[a._v("递归调用的父问题和尝试解决的子问题之间不应该有交集。")])]),a._v(" "),t("h3",{attrs:{id:"基础编程模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础编程模式"}},[a._v("#")]),a._v(" 基础编程模式")]),a._v(" "),t("p",[a._v("Java基础编程模式，编写静态方法库来完成具体的某一个任务，通过静态方法库来实现模块化编程。\n实现模块化编程的好处是：")]),a._v(" "),t("ul",[t("li",[a._v("程序整体的代码量很大时，每次处理的模块大小仍然适中;")]),a._v(" "),t("li",[a._v("可以共享和重用代码而无需重新实现;")]),a._v(" "),t("li",[a._v("很容易用改进的实现替换老的实现;")]),a._v(" "),t("li",[a._v("可以为解决编程问题建立合适的抽象模型;")]),a._v(" "),t("li",[a._v("缩小调试范围")])]),a._v(" "),t("p",[a._v("总结，就是通过模块化编程，提高了重复的代码块的复用性，降低模块之间的耦合性，提高了代码的可读性和可维护性。\n"),t("br")]),a._v(" "),t("h2",{attrs:{id:"常用代码库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用代码库"}},[a._v("#")]),a._v(" 常用代码库")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("系统标准库 java.lang.")]),a._v("* ：这其中包括Math库，实现了常用的数学函数；Integer 和 Double 库，能够将字符串转化为int和double值；String和StringBuilder库。")]),a._v(" "),t("li",[a._v("导入的系统库，例如 java.util.Arrays。")])]),a._v(" "),t("h3",{attrs:{id:"math库常用函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#math库常用函数"}},[a._v("#")]),a._v(" Math库常用函数")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/pixyshu/picgo@main/image/20221019103036.png",alt:""}})]),a._v(" "),t("h3",{attrs:{id:"arrays库-vs-collections库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arrays库-vs-collections库"}},[a._v("#")]),a._v(" Arrays库 VS Collections库")]),a._v(" "),t("p",[a._v("Arrays库是用来专门用来操作数组的静态方法库，比如"),t("code",[a._v("int[]")]),a._v(","),t("code",[a._v("String[]")]),a._v("等等。\nCollections库是专门用来操作实现了Collection接口容器的静态方法库。")]),a._v(" "),t("p",[a._v("Collection集合的依赖关系图如下：\n"),t("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/pixyshu/picgo@main/image/20221019104003.png",alt:""}}),a._v("\n图片来源：JavaGuide\n"),t("br")])])}),[],!1,null,null,null);t.default=r.exports}}]);